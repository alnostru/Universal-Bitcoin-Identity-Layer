name: Code Quality

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint with ${{ matrix.tool }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool: ['flake8', 'pylint', 'black', 'isort', 'mypy']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run flake8
        if: matrix.tool == 'flake8'
        run: |
          flake8 app/ --count --show-source --statistics
          flake8 tests/ --count --show-source --statistics

      - name: Run pylint
        if: matrix.tool == 'pylint'
        run: |
          pylint app/ --exit-zero
          pylint tests/ --exit-zero

      - name: Check black formatting
        if: matrix.tool == 'black'
        run: |
          black --check app/ tests/

      - name: Check isort import ordering
        if: matrix.tool == 'isort'
        run: |
          isort --check-only app/ tests/

      - name: Run mypy type checking
        if: matrix.tool == 'mypy'
        run: |
          mypy app/ || true

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install radon
        run: pip install radon

      - name: Check cyclomatic complexity
        run: |
          radon cc app/ -a -nb

      - name: Check maintainability index
        run: |
          radon mi app/ -nb

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run yamllint
        run: |
          pip install yamllint
          yamllint .github/workflows/ docker-compose.yml .pre-commit-config.yaml || true

  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run markdownlint
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
          config_file: .markdownlint.json
          ignore_files: node_modules
        continue-on-error: true

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, complexity, dockerfile-lint, yaml-lint, markdown-lint]
    if: always()
    steps:
      - name: Check linting results
        run: |
          echo "Code quality checks completed"
          if [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "::error::Linting failed"
            exit 1
          fi
          echo "All quality checks passed!"
