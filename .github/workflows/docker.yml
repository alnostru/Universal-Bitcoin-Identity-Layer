name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Get the first tag from the metadata
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "Testing image: $TAG"

          # Run container health check
          docker run --rm -d --name test-container -p 5000:5000 \
            -e FLASK_SECRET_KEY=test-secret \
            -e JWT_SECRET=test-jwt-secret \
            -e RPC_USER=test \
            -e RPC_PASSWORD=test \
            $TAG

          # Wait for health check
          sleep 30

          # Check if container is healthy
          docker ps -a

          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1

          # Stop container
          docker stop test-container

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  scan-image:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  build-docker-compose:
    name: Test Docker Compose Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/FLASK_SECRET_KEY=.*/FLASK_SECRET_KEY=test-secret-key/' .env
          sed -i 's/JWT_SECRET=.*/JWT_SECRET=test-jwt-secret/' .env
          sed -i 's/RPC_PASSWORD=.*/RPC_PASSWORD=test-rpc-password/' .env

      - name: Build with Docker Compose
        run: |
          docker-compose build

      - name: Test Docker Compose
        run: |
          docker-compose up -d app postgres redis
          sleep 30

          # Check if services are running
          docker-compose ps

          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1

          # View logs
          docker-compose logs app

          # Stop services
          docker-compose down

  image-summary:
    name: Docker Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, scan-image, build-docker-compose]
    if: always()
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build-and-test.result }}" == "failure" ]; then
            echo "::error::Docker build failed"
            exit 1
          fi
          if [ "${{ needs.build-docker-compose.result }}" == "failure" ]; then
            echo "::error::Docker Compose test failed"
            exit 1
          fi
          echo "Docker build and tests passed!"
